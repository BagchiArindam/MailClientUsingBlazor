@page "/Test"
@using System.Net.Sockets
@using System.Text
@* @using Google.Apis.Auth.OAuth2;
@using Google.Apis.Gmail.v1;
@using Google.Apis.Gmail.v1.Data;
@using Google.Apis.Services;
@using Google.Apis.Util.Store;
 *@
@using System.Net.Mail;
@using System.Net.Security;
@using System.Security.Cryptography.X509Certificates;
@using MailKit.Net.Imap;
@* @using MailKit.Net.Pop3; *@
@using MailKit;
@using MimeKit;
@using OpenPop.Pop3;
@using OpenPop.Mime;
@using LIbraries.Constants;

<h3>Test</h3>

<p role="status">IMAP inbox count: @IMAPCount</p>
<p role="status">POP3 inbox count: @POP3Count</p>

<button class="btn btn-primary" @onclick="FetchIMAP">Fetch Mails IMAP</button>
<button class="btn btn-primary" @onclick="FetchPOP3">Fetch Mails POP3</button>
<p role="status">Errors: @errorMsg</p>

@if (IMAPCount==0 && POP3Count==0)
{
    <p><em>Waiting...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>From</th>
                <th>Subject</th>
                <th>Body</th>
                <th>Date</th>
            </tr>
        </thead>
        <tbody>
            @if(IMAPInbox!=null)
            {
                @foreach (var mail in IMAPInbox)
                {
                    <tr>
                        <td>@mail.From</td>
                        <td>@mail.Subject</td>
                        <td>@mail.Body</td>
                        <td>@mail.MailDate.ToShortDateString()</td>
                    </tr>
                }
            }
            @if (POP3inbox != null)
            {
                @foreach (var mail in POP3inbox)
                {
                    <tr>
                        <td>@mail.From</td>
                        <td>@mail.Subject</td>
                        <td>@mail.Body</td>
                        <td>@mail.MailDate.ToShortDateString()</td>
                    </tr>
                }
            }
        </tbody>
    </table>
}

@code {
    private static string errorMsg = "No Errors";
    private static string m1="", m2="", m3="", m4="",m5 = "";
    private static int IMAPCount=0,POP3Count=0;
    string email = Constants1.email;
    string password = Constants1.password;
    private List<MailEntity>? IMAPInbox;
    private List<MailEntity>? POP3inbox;

    protected override async Task OnInitializedAsync()
    {     
        await Task.Delay(500);        
        using (var client = new OpenPop.Pop3.Pop3Client())
        {
            client.Connect("pop.gmail.com", 995, true); // Use SSL
            client.Authenticate(email, password);
            int messageCount = client.GetMessageCount();
            POP3Count = messageCount;            
            client.Disconnect();
        }        
        using (var imapClient = new ImapClient())
        {
            imapClient.Connect("imap.gmail.com", 993, true); // Use SSL
            try
            {
                imapClient.Authenticate(email, password);
                var inbox = imapClient.Inbox;
                inbox.Open(FolderAccess.ReadOnly);
                IMAPCount=inbox.Count;
            }
            catch (Exception e) { errorMsg = e.Message; }
            imapClient.Disconnect(true);
        }
    }
    private void FetchIMAP()
    {
        IMAPInbox = new();
        using (var imapClient = new ImapClient())
        {
            imapClient.Connect("imap.gmail.com", 993, true); // Use SSL
            try
            {
                imapClient.Authenticate(email, password);
                var inbox = imapClient.Inbox;
                inbox.Open(FolderAccess.ReadOnly);               

                for (int i = 0; i < inbox.Count; i++)
                {
                    var message = inbox.GetMessage(i);
                    MailEntity entity = new(Convert.ToDateTime(message.Date.DateTime), message.From.ToString(), message.Subject, message.TextBody);
                    IMAPInbox.Add(entity);
                }
            }
            catch (Exception e) { errorMsg = e.Message; }

            imapClient.Disconnect(true);
        }
    }
    private void FetchPOP3()
    {
        POP3inbox = new();
        using (var client = new OpenPop.Pop3.Pop3Client())
        {
            client.Connect("pop.gmail.com", 995, true); // Use SSL
            client.Authenticate(email, password);        
            System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);
            for (int i = 1; i <= POP3Count; i++)
            {
                var message = client.GetMessage(i);
                MailEntity entity = new(Convert.ToDateTime(message.Headers.DateSent), message.Headers.From.ToString(), message.Headers.Subject, GetBodyText(message));
                POP3inbox.Add(entity);
            }
            client.Disconnect();
        }
    }
    public class Pop3Client : IDisposable
    {
        private TcpClient tcpClient;
        private SslStream sslStream;
        private StreamReader reader;
        private StreamWriter writer;

        public Pop3Client(string host, int port, bool useSsl)
        {
            tcpClient = new TcpClient(host, port);
            sslStream = new SslStream(tcpClient.GetStream());
            reader = new StreamReader(sslStream, Encoding.ASCII);
            writer = new StreamWriter(sslStream, Encoding.ASCII) { NewLine = "\r\n" };

            if (useSsl)
            {
                sslStream.AuthenticateAsClient(host);
            }
        }

        public void Authenticate(string username, string password)
        {
            SendCommand($"USER {username}");
            SendCommand($"PASS {password}");
        }

        public int GetMessageCount()
        {
            SendCommand("STAT");
            string response = ReadResponse();
            string[] parts = response.Split(' ');
            return int.Parse(parts[1]);
        }

        public string GetMessage(int messageNumber)
        {
            SendCommand($"RETR {messageNumber}");
            return ReadResponse();
        }

        private void SendCommand(string command)
        {
            writer.WriteLine(command);
            writer.Flush();
        }

        private string ReadResponse()
        {
            string response = "";
            while (true)
            {
                string line = reader.ReadLine();
                if (line == null)
                    break;
                if (line == ".")
                    break;
                response += line + "\n";
            }
            return response;
        }

        public void Dispose()
        {
            reader.Dispose();
            writer.Dispose();
            sslStream.Dispose();
            tcpClient.Close();
        }
    }

    private class MailEntity
    {
        public DateTime MailDate { get; set; }
        public string From  { get; set; }
        public string Subject { get; set; }
        public string Body { get; set; }        
        public MailEntity(DateTime _MailDate, string _From, string _Subject, string _Body)
        {
            MailDate = _MailDate;
            From = _From;
            Subject=_Subject;
            Body = _Body;
        }
    }
    private static string GetBodyText(Message message)
    {
        var plainText = message.FindFirstPlainTextVersion();
        var htmlText = message.FindFirstHtmlVersion();

        if (plainText != null)
        {
            return plainText.GetBodyAsText();
        }
        else if (htmlText != null)
        {
            return htmlText.GetBodyAsText();
        }
        else
        {
            return "No text body found.";
        }
    }
    
}
